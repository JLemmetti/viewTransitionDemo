/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ViewTransitionsImport } from './routes/ViewTransitions'
import { Route as TechStackImport } from './routes/TechStack'
import { Route as StartImport } from './routes/Start'
import { Route as DemosImport } from './routes/Demos'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const ViewTransitionsRoute = ViewTransitionsImport.update({
  id: '/ViewTransitions',
  path: '/ViewTransitions',
  getParentRoute: () => rootRoute,
} as any)

const TechStackRoute = TechStackImport.update({
  id: '/TechStack',
  path: '/TechStack',
  getParentRoute: () => rootRoute,
} as any)

const StartRoute = StartImport.update({
  id: '/Start',
  path: '/Start',
  getParentRoute: () => rootRoute,
} as any)

const DemosRoute = DemosImport.update({
  id: '/Demos',
  path: '/Demos',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/Demos': {
      id: '/Demos'
      path: '/Demos'
      fullPath: '/Demos'
      preLoaderRoute: typeof DemosImport
      parentRoute: typeof rootRoute
    }
    '/Start': {
      id: '/Start'
      path: '/Start'
      fullPath: '/Start'
      preLoaderRoute: typeof StartImport
      parentRoute: typeof rootRoute
    }
    '/TechStack': {
      id: '/TechStack'
      path: '/TechStack'
      fullPath: '/TechStack'
      preLoaderRoute: typeof TechStackImport
      parentRoute: typeof rootRoute
    }
    '/ViewTransitions': {
      id: '/ViewTransitions'
      path: '/ViewTransitions'
      fullPath: '/ViewTransitions'
      preLoaderRoute: typeof ViewTransitionsImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/Demos': typeof DemosRoute
  '/Start': typeof StartRoute
  '/TechStack': typeof TechStackRoute
  '/ViewTransitions': typeof ViewTransitionsRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/Demos': typeof DemosRoute
  '/Start': typeof StartRoute
  '/TechStack': typeof TechStackRoute
  '/ViewTransitions': typeof ViewTransitionsRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/Demos': typeof DemosRoute
  '/Start': typeof StartRoute
  '/TechStack': typeof TechStackRoute
  '/ViewTransitions': typeof ViewTransitionsRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/Demos' | '/Start' | '/TechStack' | '/ViewTransitions'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/Demos' | '/Start' | '/TechStack' | '/ViewTransitions'
  id: '__root__' | '/' | '/Demos' | '/Start' | '/TechStack' | '/ViewTransitions'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DemosRoute: typeof DemosRoute
  StartRoute: typeof StartRoute
  TechStackRoute: typeof TechStackRoute
  ViewTransitionsRoute: typeof ViewTransitionsRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DemosRoute: DemosRoute,
  StartRoute: StartRoute,
  TechStackRoute: TechStackRoute,
  ViewTransitionsRoute: ViewTransitionsRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/Demos",
        "/Start",
        "/TechStack",
        "/ViewTransitions"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/Demos": {
      "filePath": "Demos.tsx"
    },
    "/Start": {
      "filePath": "Start.tsx"
    },
    "/TechStack": {
      "filePath": "TechStack.tsx"
    },
    "/ViewTransitions": {
      "filePath": "ViewTransitions.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
