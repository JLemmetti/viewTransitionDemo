/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as Slide3Import } from './routes/slide3'
import { Route as Slide2Import } from './routes/slide2'
import { Route as Slide1Import } from './routes/slide1'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const Slide3Route = Slide3Import.update({
  id: '/slide3',
  path: '/slide3',
  getParentRoute: () => rootRoute,
} as any)

const Slide2Route = Slide2Import.update({
  id: '/slide2',
  path: '/slide2',
  getParentRoute: () => rootRoute,
} as any)

const Slide1Route = Slide1Import.update({
  id: '/slide1',
  path: '/slide1',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/slide1': {
      id: '/slide1'
      path: '/slide1'
      fullPath: '/slide1'
      preLoaderRoute: typeof Slide1Import
      parentRoute: typeof rootRoute
    }
    '/slide2': {
      id: '/slide2'
      path: '/slide2'
      fullPath: '/slide2'
      preLoaderRoute: typeof Slide2Import
      parentRoute: typeof rootRoute
    }
    '/slide3': {
      id: '/slide3'
      path: '/slide3'
      fullPath: '/slide3'
      preLoaderRoute: typeof Slide3Import
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/slide1': typeof Slide1Route
  '/slide2': typeof Slide2Route
  '/slide3': typeof Slide3Route
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/slide1': typeof Slide1Route
  '/slide2': typeof Slide2Route
  '/slide3': typeof Slide3Route
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/slide1': typeof Slide1Route
  '/slide2': typeof Slide2Route
  '/slide3': typeof Slide3Route
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/slide1' | '/slide2' | '/slide3'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/slide1' | '/slide2' | '/slide3'
  id: '__root__' | '/' | '/slide1' | '/slide2' | '/slide3'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  Slide1Route: typeof Slide1Route
  Slide2Route: typeof Slide2Route
  Slide3Route: typeof Slide3Route
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  Slide1Route: Slide1Route,
  Slide2Route: Slide2Route,
  Slide3Route: Slide3Route,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/slide1",
        "/slide2",
        "/slide3"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/slide1": {
      "filePath": "slide1.tsx"
    },
    "/slide2": {
      "filePath": "slide2.tsx"
    },
    "/slide3": {
      "filePath": "slide3.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
